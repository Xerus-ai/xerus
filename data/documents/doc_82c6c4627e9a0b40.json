{
  "id": "doc_82c6c4627e9a0b40",
  "content": "üîß Xerus Glass - API Documentation > Complete API Reference - Backend service endpoints, authentication, and intelligent tool integration --- üìã Table of Contents - Backend Service API - Authentication - Agents API - Knowledge API - Tools API - Tool Manager Architecture - Base Tool Interface - Built-in Tools - Custom Tool Development - Integration Examples - Error Handling - Performance Considerations --- üåê Backend Service API The Xerus backend service runs on http://localhost:5001 and provides 24 RESTful endpoints for managing agents, knowledge, tools, and user authentication. Base URL ` http://localhost:5001/api/v1 ` Latest Features (January 2025) - ‚úÖ Production Authentication: Firebase JWT with role-based permissions - ‚úÖ Enhanced Agent System: 8 database-driven AI personalities - ‚úÖ Dynamic Model Selection: Real-time AI model switching - ‚úÖ Guest Permissions: Comprehensive access control system - ‚úÖ Boolean Type Safety: Fixed PostgreSQL type conversion issues Health Check `bash curl http://localhost:5001/health ` Response: `json { \"status\": \"healthy\", \"timestamp\": \"2025-01-21T15:00:00.000Z\", \"version\": \"1.0.0\", \"environment\": \"development\", \"database\": { \"status\": \"healthy\", \"version\": \"PostgreSQL 17.5\" }, \"features\": { \"authentication\": \"Firebase JWT\", \"database\": \"Neon PostgreSQL\", \"agents\": 8, \"endpoints\": 24 } } ` --- üîê Authentication Development Mode For development, use the following headers: `bash Authorization: Bearer development_token X-User-ID: admin_user ` Admin User (Full Permissions) `bash curl -H \"Authorization: Bearer development_token\" \\ -H \"X-User-ID: admin_user\" \\ http://localhost:5001/api/v1/agents ` Regular User (Limited Permissions) `bash curl -H \"Authorization: Bearer development_token\" \\ -H \"X-User-ID: development_user\" \\ http://localhost:5001/api/v1/agents ` Guest Mode (NEW) For guest users without authentication: `bash curl -H \"Authorization: guest\" \\ -H \"x-guest-session: guest_session_token\" \\ http://localhost:5001/api/v1/agents ` Guest Permissions: - ‚úÖ Allowed: /agents, /tools (limited), search functionality - ‚ùå Restricted: /knowledge, /user, advanced configurations Response Headers: - X-Guest-Mode: true - X-Guest-Session: your_session_token - X-Allowed-APIs: perplexity,firecrawl,tavily Production Mode In production, use proper JWT tokens: `bash Authorization: Bearer <jwt_token> X-User-ID: <user_id> ` --- üë§ Guest Mode Endpoints POST /api/v1/migration/check-guest-data Check if guest session has data to migrate. Headers: `bash Authorization: guest x-guest-session: your_guest_session_token ` Response: `json { \"hasData\": true, \"conversationCount\": 5, \"messageCount\": 23, \"canMigrate\": true } ` POST /api/v1/migration/migrate-to-firebase Migrate guest data to authenticated Firebase user. Headers: `bash Authorization: Bearer <firebase_jwt> x-guest-session: your_guest_session_token ` Response: `json { \"success\": true, \"migrationId\": \"migration_12345\", \"migratedItems\": { \"conversations\": 5, \"messages\": 23 } } ` --- üîß Guest Configuration Management (Admin Only) > Database-Driven Guest Permissions - Scalable configuration without code changes GET /api/v1/guest-config Get complete guest configuration (Admin only) Headers: `bash Authorization: Bearer admin_token X-User-ID: admin_user ` Response: `json { \"success\": true, \"configuration\": { \"basePermissions\": [\"agents:read\", \"agents:chat\", \"tools:read\", \"tools:perplexity\", \"tools:tavily\"], \"enabledAgents\": { \"assistant\": {\"isEnabled\": true, \"accessLevel\": \"full\"}, \"demo\": {\"isEnabled\": true, \"accessLevel\": \"full\"}, \"customer_support\": {\"isEnabled\": true, \"accessLevel\": \"full\"} }, \"enabledTools\": { \"tavily\": {\"isEnabled\": true, \"usageLimit\": 50, \"rateLimitPerHour\": 20}, \"perplexity\": {\"isEnabled\": true, \"usageLimit\": 30, \"rateLimitPerHour\": 15} }, \"lastUpdated\": \"2025-01-21T15:30:00.000Z\" } } ` GET /api/v1/guest-config/agents Get guest agent permissions Example: `bash curl -H \"Authorization: Bearer admin_token\" \\ -H \"X-User-ID: admin_user\" \\ http://localhost:5001/api/v1/guest-config/agents ` Response: `json { \"success\": true, \"enabledAgents\": { \"assistant\": {\"isEnabled\": true, \"accessLevel\": \"full\", \"agentId\": 1}, \"demo\": {\"isEnabled\": true, \"accessLevel\": \"full\", \"agentId\": 2}, \"research\": {\"isEnabled\": false, \"accessLevel\": \"read_only\"} }, \"count\": 3 } ` GET /api/v1/guest-config/tools Get guest tool permissions Example: `bash curl -H \"Authorization: Bearer admin_token\" \\ -H \"X-User-ID: admin_user\" \\ http://localhost:5001/api/v1/guest-config/tools ` Response: `json { \"success\": true, \"enabledTools\": { \"tavily\": {\"isEnabled\": true, \"category\": \"search\", \"usageLimit\": 50, \"rateLimitPerHour\": 20}, \"perplexity\": {\"isEnabled\": true, \"category\": \"search\", \"usageLimit\": 30, \"rateLimitPerHour\": 15}, \"firecrawl\": {\"isEnabled\": false, \"category\": \"scraping\", \"usageLimit\": 0, \"rateLimitPerHour\": 0} }, \"count\": 3 } ` PUT /api/v1/guest-config/agents/:personalityType Update guest agent permission Example: `bash curl -X PUT \\ -H \"Authorization: Bearer admin_token\" \\ -H \"X-User-ID: admin_user\" \\ -H \"Content-Type: application/json\" \\ -d '{\"isEnabled\": true, \"accessLevel\": \"full\"}' \\ http://localhost:5001/api/v1/guest-config/agents/research_assistant ` Response: `json { \"success\": true, \"message\": \"Agent research_assistant permission updated\", \"personalityType\": \"research_assistant\", \"isEnabled\": true, \"accessLevel\": \"full\", \"updatedAt\": \"2025-01-21T15:30:00.000Z\" } ` PUT /api/v1/guest-config/tools/:toolName Update guest tool permission Example: `bash curl -X PUT \\ -H \"Authorization: Bearer admin_token\" \\ -H \"X-User-ID: admin_user\" \\ -H \"Content-Type: application/json\" \\ -d '{\"isEnabled\": true, \"usageLimit\": 100, \"rateLimitPerHour\": 50}' \\ http://localhost:5001/api/v1/guest-config/tools/web_search ` Response: `json { \"success\": true, \"message\": \"Tool web_search permission updated\", \"toolName\": \"web_search\", \"isEnabled\": true, \"usageLimit\": 100, \"rateLimitPerHour\": 50, \"updatedAt\": \"2025-01-21T15:30:00.000Z\" } ` POST /api/v1/guest-config/agents/bulk-update Bulk update multiple agent permissions Example: `bash curl -X POST \\ -H \"Authorization: Bearer admin_token\" \\ -H \"X-User-ID: admin_user\" \\ -H \"Content-Type: application/json\" \\ -d '{ \"updates\": [ {\"personalityType\": \"demo\", \"isEnabled\": true, \"accessLevel\": \"full\"}, {\"personalityType\": \"customer_support\", \"isEnabled\": true, \"accessLevel\": \"full\"}, {\"personalityType\": \"research\", \"isEnabled\": false, \"accessLevel\": \"read_only\"} ] }' \\ http://localhost:5001/api/v1/guest-config/agents/bulk-update ` Response: `json { \"success\": true, \"message\": \"Bulk update completed: 3/3 successful\", \"results\": [ {\"personalityType\": \"demo\", \"success\": true, \"isEnabled\": true, \"accessLevel\": \"full\"}, {\"personalityType\": \"customer_support\", \"success\": true, \"isEnabled\": true, \"accessLevel\": \"full\"}, {\"personalityType\": \"research\", \"success\": true, \"isEnabled\": false, \"accessLevel\": \"read_only\"} ], \"timestamp\": \"2025-01-21T15:30:00.000Z\" } ` POST /api/v1/guest-config/tools/bulk-update Bulk update multiple tool permissions Example: `bash curl -X POST \\ -H \"Authorization: Bearer admin_token\" \\ -H \"X-User-ID: admin_user\" \\ -H \"Content-Type: application/json\" \\ -d '{ \"updates\": [ {\"toolName\": \"tavily\", \"isEnabled\": true, \"usageLimit\": 50, \"rateLimitPerHour\": 20}, {\"toolName\": \"perplexity\", \"isEnabled\": true, \"usageLimit\": 30, \"rateLimitPerHour\": 15}, {\"toolName\": \"firecrawl\", \"isEnabled\": false, \"usageLimit\": 0, \"rateLimitPerHour\": 0} ] }' \\ http://localhost:5001/api/v1/guest-config/tools/bulk-update ` Response: `json { \"success\": true, \"message\": \"Bulk update completed: 3/3 successful\", \"results\": [ {\"toolName\": \"tavily\", \"success\": true, \"isEnabled\": true, \"usageLimit\": 50, \"rateLimitPerHour\": 20}, {\"toolName\": \"perplexity\", \"success\": true, \"isEnabled\": true, \"usageLimit\": 30, \"rateLimitPerHour\": 15}, {\"toolName\": \"firecrawl\", \"success\": true, \"isEnabled\": false, \"usageLimit\": 0, \"rateLimitPerHour\": 0} ], \"timestamp\": \"2025-01-21T15:30:00.000Z\" } ` GET /api/v1/guest-config/audit Get guest permission audit log (Admin only) Example: `bash curl -H \"Authorization: Bearer admin_token\" \\ -H \"X-User-ID: admin_user\" \\ \"http://localhost:5001/api/v1/guest-config/audit?limit=20&resourceType=agent&action=update\" ` Response: `json { \"success\": true, \"auditLog\": [ { \"id\": 1, \"action\": \"update\", \"resource_type\": \"agent\", \"resource_id\": \"demo\", \"old_value\": {\"is_enabled\": false}, \"new_value\": {\"is_enabled\": true, \"access_level\": \"full\"}, \"changed_by\": \"admin_user\", \"created_at\": \"2025-01-21T15:30:00.000Z\" } ], \"pagination\": { \"limit\": 20, \"offset\": 0, \"total\": 1 } } ` GET /api/v1/guest-config/health Health check for guest permission service Example: `bash curl http://localhost:5001/api/v1/guest-config/health ` Response: `json { \"service\": \"guest-permission-service\", \"status\": \"healthy\", \"initialized\": true, \"timestamp\": \"2025-01-21T15:30:00.000Z\" } ` --- ü§ñ Agents API GET /api/v1/agents List all agents with filtering and pagination. Headers: `bash Authorization: Bearer development_token X-User-ID: admin_user ` Query Parameters: - personality_type (string): Filter by personality type - is_active (boolean): Filter by active status - limit (number): Max results (default: 50, max: 100) - offset (number): Pagination offset Example: `bash curl -H \"Authorization: Bearer development_token\" \\ -H \"X-User-ID: admin_user\" \\ \"http://localhost:5001/api/v1/agents?personality_type=assistant&limit=10\" ` Response: `json [ { \"id\": 1, \"name\": \"Assistant\", \"personality_type\": \"assistant\", \"description\": \"General balanced AI assistant\", \"system_prompt\": \"You are a helpful AI assistant...\", \"capabilities\": [\"general_qa\", \"conversation\"], \"response_style\": { \"tone\": \"professional_friendly\", \"formality\": \"moderate\" }, \"is_active\": true, \"is_default\": true, \"usage_count\": 0, \"created_at\": \"2025-01-18T15:20:31.765Z\", \"updated_at\": \"2025-01-18T15:20:31.765Z\" } ] ` GET /api/v1/agents/:id Get a specific agent by ID. Example: `bash curl -H \"Authorization: Bearer development_token\" \\ -H \"X-User-ID: admin_user\" \\ http://localhost:5001/api/v1/agents/1 ` POST /api/v1/agents Create a new agent. Required Permission: agents:create (admin role) Example: `bash curl -X POST \\ -H \"Authorization: Bearer development_token\" \\ -H \"X-User-ID: admin_user\" \\ -H \"Content-Type: application/json\" \\ -d '{ \"name\": \"Demo Tutorial Agent\", \"personality_type\": \"demo_tutorial\", \"description\": \"Interactive tutorial system\", \"system_prompt\": \"You are a demo tutorial agent...\", \"capabilities\": [\"tutorial_guidance\", \"onboarding\"], \"response_style\": { \"tone\": \"encouraging\", \"formality\": \"friendly\" }, \"is_active\": true, \"is_default\": false, \"ai_model\": \"gpt-4o\" }' \\ http://localhost:5001/api/v1/agents ` PUT /api/v1/agents/:id Update an existing agent. Required Permission: agents:update (admin role) DELETE /api/v1/agents/:id Delete an agent. Required Permission: agents:delete (admin role) --- üìö Knowledge API GET /api/v1/knowledge List knowledge documents. POST /api/v1/knowledge Upload new knowledge document. Required Permission: knowledge:create --- üõ†Ô∏è Tools API GET /api/v1/tools List all available tools. Example: `bash curl -H \"Authorization: Bearer development_token\" \\ -H \"X-User-ID: admin_user\" \\ http://localhost:5001/api/v1/tools ` POST /api/v1/tools/:toolName/execute Execute a specific tool. Example: `bash curl -X POST \\ -H \"Authorization: Bearer development_token\" \\ -H \"X-User-ID: admin_user\" \\ -H \"Content-Type: application/json\" \\ -d '{ \"parameters\": { \"query\": \"latest AI news\", \"max_results\": 5 } }' \\ http://localhost:5001/api/v1/tools/web_search/execute ` --- üö® Common Issues Permission Denied `json { \"error\": \"Forbidden\", \"message\": \"Insufficient permissions. Required permission: agents:create\", \"code\": \"INSUFFICIENT_PERMISSIONS\" } ` Solution: Use admin_user for operations requiring special permissions: `bash curl -H \"X-User-ID: admin_user\" ... ` Unauthorized `json { \"error\": \"Unauthorized\", \"message\": \"Missing or invalid authorization header\", \"code\": \"MISSING_TOKEN\" } ` Solution: Include proper authorization header: `bash curl -H \"Authorization: Bearer development_token\" ... ` --- --- üèóÔ∏è Overview The Xerus Glass Tool System provides a centralized, extensible framework for integrating external services and capabilities into the AI assistant. It supports parallel execution, automatic error handling, and intelligent tool orchestration. Key Features - Unified Interface: Consistent API across all tools - Parallel Execution: Run multiple tools simultaneously - Error Recovery: Graceful handling of tool failures - Dynamic Registration: Add/remove tools at runtime - Performance Monitoring: Execution time tracking - API Key Management: Secure credential handling --- üèõÔ∏è Tool Manager Architecture Core Class: ToolManager The ToolManager is the central orchestrator for all tool operations. `javascript const { toolManager } = require('./src/services/tool-manager'); // Get available tools const tools = toolManager.getAvailableTools(); console.log(tools); // ['web_search', 'firecrawl_scrape', 'get_time', ...] // Execute a single tool const result = await toolManager.executeTool('web_search', { query: 'latest AI developments', max_results: 5 }); // Execute multiple tools in parallel const results = await toolManager.executeTools([ { name: 'get_time', parameters: {} }, { name: 'web_search', parameters: { query: 'weather forecast' } } ]); ` Tool Registration System Tools are automatically registered during initialization: `javascript class ToolManager { initializeTools() { // Web search tools this.registerTool(new WebSearchTool(this.apiKeys)); this.registerTool(new FirecrawlTool(this.apiKeys.firecrawl)); // Utility tools this.registerTool(new TimeTool()); this.registerTool(new SystemInfoTool()); this.registerTool(new CalculatorTool()); // RAG tool this.registerTool(new SimpleRAGTool()); } } ` --- üîå Base Tool Interface All tools must extend the BaseTool class and implement the execute method. BaseTool Class `javascript class BaseTool { constructor(name, description, parameters) { this.name = name; // Unique tool identifier this.description = description; // Human-readable description this.parameters = parameters; // JSON schema for parameters } async execute(parameters) { throw new Error('execute() method must be implemented'); } } ` Parameter Schema Tools define their input parameters using JSON Schema: `javascript { type: 'object', properties: { query: { type: 'string', description: 'The search query', }, max_results: { type: 'number', description: 'Maximum number of results', default: 5 } }, required: ['query'] } ` Tool Definition Format For AI function calling, tools are formatted as: `javascript { type: 'function', function: { name: 'web_search', description: 'Search the web for current information', parameters: { / JSON schema / } } } ` --- üõ†Ô∏è Built-in Tools 1. Web Search Tool (web_search) Searches the web using Tavily API for current information. Parameters `javascript { query: string, // Required: Search query max_results: number, // Optional: Max results (default: 5) include_raw_content: boolean // Optional: Include raw content (default: false) } ` Response `javascript { success: true, result: { query: \"latest AI developments\", results: [ { title: \"AI Breakthrough in 2024\", url: \"https://example.com/ai-news\", content: \"Recent developments in AI...\", score: 0.95 } ], answer: \"Based on recent developments...\", total_results: 5 }, executionTime: 1250, timestamp: \"2024-01-15T10:30:00.000Z\" } ` Usage Example `javascript const result = await toolManager.executeTool('web_search', { query: 'latest AI developments', max_results: 3, include_raw_content: false }); if (result.success) { console.log(Found ${result.result.total_results} results); result.result.results.forEach(item => { console.log(${item.title}: ${item.content}); }); } ` 2. Firecrawl Tool (firecrawl_scrape) Scrapes and extracts content from web pages using Firecrawl API. Parameters `javascript { url: string, // Required: URL to scrape formats: string[], // Optional: ['markdown', 'html', 'links', 'screenshot'] include_tags: string[], // Optional: HTML tags to include exclude_tags: string[] // Optional: HTML tags to exclude } ` Response `javascript { success: true, result: { url: \"https://example.com\", title: \"Page Title\", description: \"Page description\", content: \"Page Content\\n\\nMarkdown formatted content...\", links: [\"https://link1.com\", \"https://link2.com\"], screenshot: \"base64_image_data\", success: true }, executionTime: 2100, timestamp: \"2024-01-15T10:30:00.000Z\" } ` Usage Example `javascript const result = await toolManager.executeTool('firecrawl_scrape', { url: 'https://example.com/article', formats: ['markdown', 'links'], exclude_tags: ['script', 'style'] }); if (result.success) { console.log('Page Title:', result.result.title); console.log('Content:', result.result.content); console.log('Links found:', result.result.links.length); } ` 3. Time Tool (get_time) Retrieves current time and date information. Parameters `javascript { timezone: string, // Optional: Timezone (default: 'local') format: string // Optional: 'iso', 'readable', 'timestamp' (default: 'readable') } ` Response `javascript { success: true, result: { timestamp: 1705320600000, iso: \"2024-01-15T10:30:00.000Z\", readable: \"1/15/2024, 10:30:00 AM\", timezone: \"Local\", day_of_week: \"Monday\", date: \"1/15/2024\", time: \"10:30:00 AM\" }, executionTime: 5, timestamp: \"2024-01-15T10:30:00.000Z\" } ` 4. System Info Tool (get_system_info) Retrieves system information and computer details. Parameters `javascript { details: string[] // Optional: ['platform', 'memory', 'cpu', 'network', 'all'] } ` Response `javascript { success: true, result: { platform: { os: \"darwin\", arch: \"x64\", version: \"20.6.0\", hostname: \"MacBook-Pro\", uptime: 86400 }, memory: { total: 17179869184, free: 8589934592, used: 8589934592, totalGB: 16, freeGB: 8, usagePercent: 50 } }, executionTime: 12, timestamp: \"2024-01-15T10:30:00.000Z\" } ` 5. Calculator Tool (calculate) Performs mathematical calculations safely. Parameters `javascript { expression: string, // Required: Mathematical expression precision: number // Optional: Decimal places (default: 2) } ` Response `javascript { success: true, result: { expression: \"2 + 3 * 4\", result: 14, formatted: \"14.00\" }, executionTime: 3, timestamp: \"2024-01-15T10:30:00.000Z\" } ` 6. Simple RAG Tool (search_documents) Searches through local documents and knowledge base. Parameters `javascript { query: string, // Required: Search query limit: number // Optional: Max results (default: 5) } ` Response `javascript { success: true, result: { query: \"API documentation\", results: [ { title: \"API Guide\", content: \"This document explains how to use the API...\", score: 1.0 } ], total_found: 1 }, executionTime: 50, timestamp: \"2024-01-15T10:30:00.000Z\" } ` --- üî® Custom Tool Development Creating a New Tool 1. Extend BaseTool: `javascript class CustomTool extends BaseTool { constructor(apiKey) { super( 'custom_tool', 'Description of what this tool does', { type: 'object', properties: { input: { type: 'string', description: 'Input parameter description' } }, required: ['input'] } ); this.apiKey = apiKey; } async execute(parameters) { const { input } = parameters; try { // Tool implementation const result = await this.performOperation(input); return { processed_input: input, result: result, metadata: { tool_version: '1.0.0', execution_context: 'custom' } }; } catch (error) { throw new Error(Custom tool failed: ${error.message}); } } async performOperation(input) { // Custom logic here return Processed: ${input}; } } ` 2. Register the Tool: `javascript // Add to ToolManager.initializeTools() this.registerTool(new CustomTool(this.apiKeys.custom)); ` Tool Best Practices Error Handling `javascript async execute(parameters) { try { // Validate parameters if (!parameters.required_param) { throw new Error('required_param is missing'); } // Perform operation const result = await this.performOperation(parameters); return result; } catch (error) { // Log error details console.error([${this.name}] Error:, error); // Throw with context throw new Error(${this.name} failed: ${error.message}); } } ` API Key Management `javascript class APITool extends BaseTool { constructor(apiKey) { super(/ ... /); this.apiKey = apiKey; } async execute(parameters) { if (!this.apiKey) { throw new Error('API key not configured'); } // ... rest of implementation } updateApiKey(apiKeys) { this.apiKey = apiKeys.service_name; } } ` Performance Optimization `javascript class CachedTool extends BaseTool { constructor() { super(/ ... /); this.cache = new Map(); this.cacheTimeout = 5 60 1000; // 5 minutes } async execute(parameters) { const cacheKey = this.generateCacheKey(parameters); const cached = this.cache.get(cacheKey); if (cached && Date.now() - cached.timestamp < this.cacheTimeout) { return cached.result; } const result = await this.performOperation(parameters); this.cache.set(cacheKey, { result, timestamp: Date.now() }); return result; } } ` --- üí° Integration Examples AI Function Calling Integration `javascript // Get tool definitions for AI const toolDefinitions = toolManager.getToolDefinitions(); // Send to AI provider (OpenAI example) const response = await openai.chat.completions.create({ model: 'gpt-4', messages: [ { role: 'user', content: 'What\\'s the weather in Tokyo?' } ], tools: toolDefinitions, tool_choice: 'auto' }); // Handle tool calls if (response.choices[0].message.tool_calls) { const toolCalls = response.choices[0].message.tool_calls.map(call => ({ name: call.function.name, parameters: JSON.parse(call.function.arguments) })); const toolResults = await toolManager.executeTools(toolCalls); // Send results back to AI for final response // ... } ` Batch Tool Execution `javascript // Execute multiple tools in parallel const batchOperations = [ { name: 'get_time', parameters: {} }, { name: 'get_system_info', parameters: { details: ['memory', 'cpu'] } }, { name: 'web_search', parameters: { query: 'current events', max_results: 3 } } ]; const results = await toolManager.executeTools(batchOperations); results.forEach((result, index) => { console.log(Tool ${batchOperations[index].name}:); console.log( Success: ${result.success}); console.log( Time: ${result.executionTime}ms); if (result.success) { console.log( Result:, result.result); } else { console.log( Error:, result.error); } }); ` Tool Chain Workflows `javascript class WorkflowManager { constructor(toolManager) { this.toolManager = toolManager; } async executeResearchWorkflow(topic) { // Step 1: Search for information const searchResult = await this.toolManager.executeTool('web_search', { query: topic, max_results: 5 }); if (!searchResult.success) { throw new Error('Web search failed'); } // Step 2: Scrape detailed content from top results const scrapePromises = searchResult.result.results .slice(0, 3) .map(result => this.toolManager.executeTool('firecrawl_scrape', { url: result.url, formats: ['markdown'] }) ); const scrapeResults = await Promise.all(scrapePromises); // Step 3: Combine results const combinedContent = { topic, search_summary: searchResult.result.answer, detailed_sources: scrapeResults .filter(r => r.success) .map(r => r.result), timestamp: new Date().toISOString() }; return combinedContent; } } ` --- ‚ö†Ô∏è Error Handling Error Response Format When a tool fails, the response follows this format: `javascript { success: false, error: \"Error message describing what went wrong\", timestamp: \"2024-01-15T10:30:00.000Z\" } ` Common Error Types API Key Errors `javascript { success: false, error: \"Tavily API key not configured\", timestamp: \"2024-01-15T10:30:00.000Z\" } ` Network Errors `javascript { success: false, error: \"Web search failed: Network timeout\", timestamp: \"2024-01-15T10:30:00.000Z\" } ` Parameter Validation Errors `javascript { success: false, error: \"Tool 'web_search' not found\", timestamp: \"2024-01-15T10:30:00.000Z\" } ` Error Handling Best Practices `javascript async function safeToolExecution(toolName, parameters) { try { const result = await toolManager.executeTool(toolName, parameters); if (!result.success) { console.error(Tool ${toolName} failed:, result.error); return null; } return result.result; } catch (error) { console.error(Tool execution error:, error); return null; } } // Usage with fallback const webResults = await safeToolExecution('web_search', { query: 'AI news' }); if (!webResults) { console.log('Web search unavailable, using cached results'); // Fallback logic } ` --- ‚ö° Performance Considerations Execution Time Monitoring All tool executions are automatically timed: `javascript const result = await toolManager.executeTool('web_search', { query: 'test' }); console.log(Execution time: ${result.executionTime}ms); ` Parallel Execution Benefits `javascript // Sequential execution (slow) const time1 = await toolManager.executeTool('get_time', {}); const search1 = await toolManager.executeTool('web_search', { query: 'news' }); // Total time: ~1500ms // Parallel execution (fast) const results = await toolManager.executeTools([ { name: 'get_time', parameters: {} }, { name: 'web_search', parameters: { query: 'news' } } ]); // Total time: ~1200ms (limited by slowest tool) ` Performance Tips 1. Use Parallel Execution: Execute independent tools simultaneously 2. Implement Caching: Cache results for repeated queries 3. Optimize Parameters: Use appropriate limits and filters 4. Monitor Execution: Track tool performance over time 5. Graceful Degradation: Handle tool failures gracefully Memory Management `javascript class ToolManager { constructor() { this.tools = new Map(); this.executionHistory = new Map(); this.maxHistorySize = 1000; } async executeTool(toolName, parameters) { const result = await tool.execute(parameters); // Store execution history with size limit this.addToHistory(toolName, result.executionTime); return result; } addToHistory(toolName, executionTime) { if (this.executionHistory.size >= this.maxHistorySize) { const firstKey = this.executionHistory.keys().next().value; this.executionHistory.delete(firstKey); } this.executionHistory.set(Date.now(), { tool: toolName, time: executionTime }); } } ` --- üîÑ API Updates & Versioning Tool Version Management Each tool should include version information: `javascript class VersionedTool extends BaseTool { constructor() { super(/ ... /); this.version = '1.2.0'; this.apiVersion = '2023-12-01'; } async execute(parameters) { const result = await this.performOperation(parameters); return { ...result, metadata: { tool_version: this.version, api_version: this.apiVersion, compatibility: 'stable' } }; } } ` Backward Compatibility When updating tools, maintain backward compatibility: `javascript async execute(parameters) { // Support both old and new parameter formats const query = parameters.query || parameters.search_term; const maxResults = parameters.max_results || parameters.limit || 5; // ... rest of implementation } ` --- For implementation examples and advanced usage patterns, see the User Guide and explore the source code in /src/services/tool-manager.js.",
  "originalContent": "# üîß Xerus Glass - API Documentation\r\n\r\n> **Complete API Reference** - Backend service endpoints, authentication, and intelligent tool integration\r\n\r\n---\r\n\r\n## üìã Table of Contents\r\n\r\n- [Backend Service API](#backend-service-api)\r\n- [Authentication](#authentication)  \r\n- [Agents API](#agents-api)\r\n- [Knowledge API](#knowledge-api)\r\n- [Tools API](#tools-api)\r\n- [Tool Manager Architecture](#tool-manager-architecture)\r\n- [Base Tool Interface](#base-tool-interface)\r\n- [Built-in Tools](#built-in-tools)\r\n- [Custom Tool Development](#custom-tool-development)\r\n- [Integration Examples](#integration-examples)\r\n- [Error Handling](#error-handling)\r\n- [Performance Considerations](#performance-considerations)\r\n\r\n---\r\n\r\n## üåê Backend Service API\r\n\r\nThe Xerus backend service runs on `http://localhost:5001` and provides **24 RESTful endpoints** for managing agents, knowledge, tools, and user authentication.\r\n\r\n### Base URL\r\n```\r\nhttp://localhost:5001/api/v1\r\n```\r\n\r\n### Latest Features (January 2025)\r\n- ‚úÖ **Production Authentication**: Firebase JWT with role-based permissions\r\n- ‚úÖ **Enhanced Agent System**: 8 database-driven AI personalities\r\n- ‚úÖ **Dynamic Model Selection**: Real-time AI model switching\r\n- ‚úÖ **Guest Permissions**: Comprehensive access control system\r\n- ‚úÖ **Boolean Type Safety**: Fixed PostgreSQL type conversion issues\r\n\r\n### Health Check\r\n```bash\r\ncurl http://localhost:5001/health\r\n```\r\n\r\nResponse:\r\n```json\r\n{\r\n  \"status\": \"healthy\",\r\n  \"timestamp\": \"2025-01-21T15:00:00.000Z\",\r\n  \"version\": \"1.0.0\",\r\n  \"environment\": \"development\",\r\n  \"database\": {\r\n    \"status\": \"healthy\", \r\n    \"version\": \"PostgreSQL 17.5\"\r\n  },\r\n  \"features\": {\r\n    \"authentication\": \"Firebase JWT\",\r\n    \"database\": \"Neon PostgreSQL\",\r\n    \"agents\": 8,\r\n    \"endpoints\": 24\r\n  }\r\n}\r\n```\r\n\r\n---\r\n\r\n## üîê Authentication\r\n\r\n### Development Mode\r\nFor development, use the following headers:\r\n\r\n```bash\r\nAuthorization: Bearer development_token\r\nX-User-ID: admin_user\r\n```\r\n\r\n### Admin User (Full Permissions)\r\n```bash\r\ncurl -H \"Authorization: Bearer development_token\" \\\r\n     -H \"X-User-ID: admin_user\" \\\r\n     http://localhost:5001/api/v1/agents\r\n```\r\n\r\n### Regular User (Limited Permissions)  \r\n```bash\r\ncurl -H \"Authorization: Bearer development_token\" \\\r\n     -H \"X-User-ID: development_user\" \\\r\n     http://localhost:5001/api/v1/agents\r\n```\r\n\r\n### Guest Mode (NEW)\r\nFor guest users without authentication:\r\n\r\n```bash\r\ncurl -H \"Authorization: guest\" \\\r\n     -H \"x-guest-session: guest_session_token\" \\\r\n     http://localhost:5001/api/v1/agents\r\n```\r\n\r\n**Guest Permissions:**\r\n- ‚úÖ **Allowed**: `/agents`, `/tools` (limited), search functionality\r\n- ‚ùå **Restricted**: `/knowledge`, `/user`, advanced configurations\r\n\r\n**Response Headers:**\r\n- `X-Guest-Mode: true`\r\n- `X-Guest-Session: your_session_token`\r\n- `X-Allowed-APIs: perplexity,firecrawl,tavily`\r\n\r\n### Production Mode\r\nIn production, use proper JWT tokens:\r\n```bash\r\nAuthorization: Bearer <jwt_token>\r\nX-User-ID: <user_id>\r\n```\r\n\r\n---\r\n\r\n## üë§ Guest Mode Endpoints\r\n\r\n### POST /api/v1/migration/check-guest-data\r\nCheck if guest session has data to migrate.\r\n\r\n**Headers:**\r\n```bash\r\nAuthorization: guest\r\nx-guest-session: your_guest_session_token\r\n```\r\n\r\n**Response:**\r\n```json\r\n{\r\n  \"hasData\": true,\r\n  \"conversationCount\": 5,\r\n  \"messageCount\": 23,\r\n  \"canMigrate\": true\r\n}\r\n```\r\n\r\n### POST /api/v1/migration/migrate-to-firebase\r\nMigrate guest data to authenticated Firebase user.\r\n\r\n**Headers:**\r\n```bash\r\nAuthorization: Bearer <firebase_jwt>\r\nx-guest-session: your_guest_session_token\r\n```\r\n\r\n**Response:**\r\n```json\r\n{\r\n  \"success\": true,\r\n  \"migrationId\": \"migration_12345\",\r\n  \"migratedItems\": {\r\n    \"conversations\": 5,\r\n    \"messages\": 23\r\n  }\r\n}\r\n```\r\n\r\n---\r\n\r\n## üîß Guest Configuration Management (Admin Only)\r\n\r\n> **Database-Driven Guest Permissions** - Scalable configuration without code changes\r\n\r\n### GET /api/v1/guest-config\r\nGet complete guest configuration (Admin only)\r\n\r\n**Headers:**\r\n```bash\r\nAuthorization: Bearer admin_token\r\nX-User-ID: admin_user\r\n```\r\n\r\n**Response:**\r\n```json\r\n{\r\n  \"success\": true,\r\n  \"configuration\": {\r\n    \"basePermissions\": [\"agents:read\", \"agents:chat\", \"tools:read\", \"tools:perplexity\", \"tools:tavily\"],\r\n    \"enabledAgents\": {\r\n      \"assistant\": {\"isEnabled\": true, \"accessLevel\": \"full\"},\r\n      \"demo\": {\"isEnabled\": true, \"accessLevel\": \"full\"},\r\n      \"customer_support\": {\"isEnabled\": true, \"accessLevel\": \"full\"}\r\n    },\r\n    \"enabledTools\": {\r\n      \"tavily\": {\"isEnabled\": true, \"usageLimit\": 50, \"rateLimitPerHour\": 20},\r\n      \"perplexity\": {\"isEnabled\": true, \"usageLimit\": 30, \"rateLimitPerHour\": 15}\r\n    },\r\n    \"lastUpdated\": \"2025-01-21T15:30:00.000Z\"\r\n  }\r\n}\r\n```\r\n\r\n### GET /api/v1/guest-config/agents\r\nGet guest agent permissions\r\n\r\n**Example:**\r\n```bash\r\ncurl -H \"Authorization: Bearer admin_token\" \\\r\n     -H \"X-User-ID: admin_user\" \\\r\n     http://localhost:5001/api/v1/guest-config/agents\r\n```\r\n\r\n**Response:**\r\n```json\r\n{\r\n  \"success\": true,\r\n  \"enabledAgents\": {\r\n    \"assistant\": {\"isEnabled\": true, \"accessLevel\": \"full\", \"agentId\": 1},\r\n    \"demo\": {\"isEnabled\": true, \"accessLevel\": \"full\", \"agentId\": 2},\r\n    \"research\": {\"isEnabled\": false, \"accessLevel\": \"read_only\"}\r\n  },\r\n  \"count\": 3\r\n}\r\n```\r\n\r\n### GET /api/v1/guest-config/tools\r\nGet guest tool permissions\r\n\r\n**Example:**\r\n```bash\r\ncurl -H \"Authorization: Bearer admin_token\" \\\r\n     -H \"X-User-ID: admin_user\" \\\r\n     http://localhost:5001/api/v1/guest-config/tools\r\n```\r\n\r\n**Response:**\r\n```json\r\n{\r\n  \"success\": true,\r\n  \"enabledTools\": {\r\n    \"tavily\": {\"isEnabled\": true, \"category\": \"search\", \"usageLimit\": 50, \"rateLimitPerHour\": 20},\r\n    \"perplexity\": {\"isEnabled\": true, \"category\": \"search\", \"usageLimit\": 30, \"rateLimitPerHour\": 15},\r\n    \"firecrawl\": {\"isEnabled\": false, \"category\": \"scraping\", \"usageLimit\": 0, \"rateLimitPerHour\": 0}\r\n  },\r\n  \"count\": 3\r\n}\r\n```\r\n\r\n### PUT /api/v1/guest-config/agents/:personalityType\r\nUpdate guest agent permission\r\n\r\n**Example:**\r\n```bash\r\ncurl -X PUT \\\r\n     -H \"Authorization: Bearer admin_token\" \\\r\n     -H \"X-User-ID: admin_user\" \\\r\n     -H \"Content-Type: application/json\" \\\r\n     -d '{\"isEnabled\": true, \"accessLevel\": \"full\"}' \\\r\n     http://localhost:5001/api/v1/guest-config/agents/research_assistant\r\n```\r\n\r\n**Response:**\r\n```json\r\n{\r\n  \"success\": true,\r\n  \"message\": \"Agent research_assistant permission updated\",\r\n  \"personalityType\": \"research_assistant\",\r\n  \"isEnabled\": true,\r\n  \"accessLevel\": \"full\",\r\n  \"updatedAt\": \"2025-01-21T15:30:00.000Z\"\r\n}\r\n```\r\n\r\n### PUT /api/v1/guest-config/tools/:toolName\r\nUpdate guest tool permission\r\n\r\n**Example:**\r\n```bash\r\ncurl -X PUT \\\r\n     -H \"Authorization: Bearer admin_token\" \\\r\n     -H \"X-User-ID: admin_user\" \\\r\n     -H \"Content-Type: application/json\" \\\r\n     -d '{\"isEnabled\": true, \"usageLimit\": 100, \"rateLimitPerHour\": 50}' \\\r\n     http://localhost:5001/api/v1/guest-config/tools/web_search\r\n```\r\n\r\n**Response:**\r\n```json\r\n{\r\n  \"success\": true,\r\n  \"message\": \"Tool web_search permission updated\",\r\n  \"toolName\": \"web_search\",\r\n  \"isEnabled\": true,\r\n  \"usageLimit\": 100,\r\n  \"rateLimitPerHour\": 50,\r\n  \"updatedAt\": \"2025-01-21T15:30:00.000Z\"\r\n}\r\n```\r\n\r\n### POST /api/v1/guest-config/agents/bulk-update\r\nBulk update multiple agent permissions\r\n\r\n**Example:**\r\n```bash\r\ncurl -X POST \\\r\n     -H \"Authorization: Bearer admin_token\" \\\r\n     -H \"X-User-ID: admin_user\" \\\r\n     -H \"Content-Type: application/json\" \\\r\n     -d '{\r\n       \"updates\": [\r\n         {\"personalityType\": \"demo\", \"isEnabled\": true, \"accessLevel\": \"full\"},\r\n         {\"personalityType\": \"customer_support\", \"isEnabled\": true, \"accessLevel\": \"full\"},\r\n         {\"personalityType\": \"research\", \"isEnabled\": false, \"accessLevel\": \"read_only\"}\r\n       ]\r\n     }' \\\r\n     http://localhost:5001/api/v1/guest-config/agents/bulk-update\r\n```\r\n\r\n**Response:**\r\n```json\r\n{\r\n  \"success\": true,\r\n  \"message\": \"Bulk update completed: 3/3 successful\",\r\n  \"results\": [\r\n    {\"personalityType\": \"demo\", \"success\": true, \"isEnabled\": true, \"accessLevel\": \"full\"},\r\n    {\"personalityType\": \"customer_support\", \"success\": true, \"isEnabled\": true, \"accessLevel\": \"full\"},\r\n    {\"personalityType\": \"research\", \"success\": true, \"isEnabled\": false, \"accessLevel\": \"read_only\"}\r\n  ],\r\n  \"timestamp\": \"2025-01-21T15:30:00.000Z\"\r\n}\r\n```\r\n\r\n### POST /api/v1/guest-config/tools/bulk-update\r\nBulk update multiple tool permissions\r\n\r\n**Example:**\r\n```bash\r\ncurl -X POST \\\r\n     -H \"Authorization: Bearer admin_token\" \\\r\n     -H \"X-User-ID: admin_user\" \\\r\n     -H \"Content-Type: application/json\" \\\r\n     -d '{\r\n       \"updates\": [\r\n         {\"toolName\": \"tavily\", \"isEnabled\": true, \"usageLimit\": 50, \"rateLimitPerHour\": 20},\r\n         {\"toolName\": \"perplexity\", \"isEnabled\": true, \"usageLimit\": 30, \"rateLimitPerHour\": 15},\r\n         {\"toolName\": \"firecrawl\", \"isEnabled\": false, \"usageLimit\": 0, \"rateLimitPerHour\": 0}\r\n       ]\r\n     }' \\\r\n     http://localhost:5001/api/v1/guest-config/tools/bulk-update\r\n```\r\n\r\n**Response:**\r\n```json\r\n{\r\n  \"success\": true,\r\n  \"message\": \"Bulk update completed: 3/3 successful\",\r\n  \"results\": [\r\n    {\"toolName\": \"tavily\", \"success\": true, \"isEnabled\": true, \"usageLimit\": 50, \"rateLimitPerHour\": 20},\r\n    {\"toolName\": \"perplexity\", \"success\": true, \"isEnabled\": true, \"usageLimit\": 30, \"rateLimitPerHour\": 15},\r\n    {\"toolName\": \"firecrawl\", \"success\": true, \"isEnabled\": false, \"usageLimit\": 0, \"rateLimitPerHour\": 0}\r\n  ],\r\n  \"timestamp\": \"2025-01-21T15:30:00.000Z\"\r\n}\r\n```\r\n\r\n### GET /api/v1/guest-config/audit\r\nGet guest permission audit log (Admin only)\r\n\r\n**Example:**\r\n```bash\r\ncurl -H \"Authorization: Bearer admin_token\" \\\r\n     -H \"X-User-ID: admin_user\" \\\r\n     \"http://localhost:5001/api/v1/guest-config/audit?limit=20&resourceType=agent&action=update\"\r\n```\r\n\r\n**Response:**\r\n```json\r\n{\r\n  \"success\": true,\r\n  \"auditLog\": [\r\n    {\r\n      \"id\": 1,\r\n      \"action\": \"update\",\r\n      \"resource_type\": \"agent\", \r\n      \"resource_id\": \"demo\",\r\n      \"old_value\": {\"is_enabled\": false},\r\n      \"new_value\": {\"is_enabled\": true, \"access_level\": \"full\"},\r\n      \"changed_by\": \"admin_user\",\r\n      \"created_at\": \"2025-01-21T15:30:00.000Z\"\r\n    }\r\n  ],\r\n  \"pagination\": {\r\n    \"limit\": 20,\r\n    \"offset\": 0,\r\n    \"total\": 1\r\n  }\r\n}\r\n```\r\n\r\n### GET /api/v1/guest-config/health\r\nHealth check for guest permission service\r\n\r\n**Example:**\r\n```bash\r\ncurl http://localhost:5001/api/v1/guest-config/health\r\n```\r\n\r\n**Response:**\r\n```json\r\n{\r\n  \"service\": \"guest-permission-service\",\r\n  \"status\": \"healthy\",\r\n  \"initialized\": true,\r\n  \"timestamp\": \"2025-01-21T15:30:00.000Z\"\r\n}\r\n```\r\n\r\n---\r\n\r\n## ü§ñ Agents API\r\n\r\n### GET /api/v1/agents\r\nList all agents with filtering and pagination.\r\n\r\n**Headers:**\r\n```bash\r\nAuthorization: Bearer development_token\r\nX-User-ID: admin_user\r\n```\r\n\r\n**Query Parameters:**\r\n- `personality_type` (string): Filter by personality type\r\n- `is_active` (boolean): Filter by active status\r\n- `limit` (number): Max results (default: 50, max: 100)\r\n- `offset` (number): Pagination offset\r\n\r\n**Example:**\r\n```bash\r\ncurl -H \"Authorization: Bearer development_token\" \\\r\n     -H \"X-User-ID: admin_user\" \\\r\n     \"http://localhost:5001/api/v1/agents?personality_type=assistant&limit=10\"\r\n```\r\n\r\n**Response:**\r\n```json\r\n[\r\n  {\r\n    \"id\": 1,\r\n    \"name\": \"Assistant\",\r\n    \"personality_type\": \"assistant\",\r\n    \"description\": \"General balanced AI assistant\",\r\n    \"system_prompt\": \"You are a helpful AI assistant...\",\r\n    \"capabilities\": [\"general_qa\", \"conversation\"],\r\n    \"response_style\": {\r\n      \"tone\": \"professional_friendly\",\r\n      \"formality\": \"moderate\"\r\n    },\r\n    \"is_active\": true,\r\n    \"is_default\": true,\r\n    \"usage_count\": 0,\r\n    \"created_at\": \"2025-01-18T15:20:31.765Z\",\r\n    \"updated_at\": \"2025-01-18T15:20:31.765Z\"\r\n  }\r\n]\r\n```\r\n\r\n### GET /api/v1/agents/:id\r\nGet a specific agent by ID.\r\n\r\n**Example:**\r\n```bash\r\ncurl -H \"Authorization: Bearer development_token\" \\\r\n     -H \"X-User-ID: admin_user\" \\\r\n     http://localhost:5001/api/v1/agents/1\r\n```\r\n\r\n### POST /api/v1/agents\r\nCreate a new agent.\r\n\r\n**Required Permission:** `agents:create` (admin role)\r\n\r\n**Example:**\r\n```bash\r\ncurl -X POST \\\r\n     -H \"Authorization: Bearer development_token\" \\\r\n     -H \"X-User-ID: admin_user\" \\\r\n     -H \"Content-Type: application/json\" \\\r\n     -d '{\r\n       \"name\": \"Demo Tutorial Agent\",\r\n       \"personality_type\": \"demo_tutorial\",\r\n       \"description\": \"Interactive tutorial system\",\r\n       \"system_prompt\": \"You are a demo tutorial agent...\",\r\n       \"capabilities\": [\"tutorial_guidance\", \"onboarding\"],\r\n       \"response_style\": {\r\n         \"tone\": \"encouraging\",\r\n         \"formality\": \"friendly\"\r\n       },\r\n       \"is_active\": true,\r\n       \"is_default\": false,\r\n       \"ai_model\": \"gpt-4o\"\r\n     }' \\\r\n     http://localhost:5001/api/v1/agents\r\n```\r\n\r\n### PUT /api/v1/agents/:id\r\nUpdate an existing agent.\r\n\r\n**Required Permission:** `agents:update` (admin role)\r\n\r\n### DELETE /api/v1/agents/:id  \r\nDelete an agent.\r\n\r\n**Required Permission:** `agents:delete` (admin role)\r\n\r\n---\r\n\r\n## üìö Knowledge API\r\n\r\n### GET /api/v1/knowledge\r\nList knowledge documents.\r\n\r\n### POST /api/v1/knowledge\r\nUpload new knowledge document.\r\n\r\n**Required Permission:** `knowledge:create`\r\n\r\n---\r\n\r\n## üõ†Ô∏è Tools API\r\n\r\n### GET /api/v1/tools\r\nList all available tools.\r\n\r\n**Example:**\r\n```bash\r\ncurl -H \"Authorization: Bearer development_token\" \\\r\n     -H \"X-User-ID: admin_user\" \\\r\n     http://localhost:5001/api/v1/tools\r\n```\r\n\r\n### POST /api/v1/tools/:toolName/execute\r\nExecute a specific tool.\r\n\r\n**Example:**\r\n```bash\r\ncurl -X POST \\\r\n     -H \"Authorization: Bearer development_token\" \\\r\n     -H \"X-User-ID: admin_user\" \\\r\n     -H \"Content-Type: application/json\" \\\r\n     -d '{\r\n       \"parameters\": {\r\n         \"query\": \"latest AI news\",\r\n         \"max_results\": 5\r\n       }\r\n     }' \\\r\n     http://localhost:5001/api/v1/tools/web_search/execute\r\n```\r\n\r\n---\r\n\r\n## üö® Common Issues\r\n\r\n### Permission Denied\r\n```json\r\n{\r\n  \"error\": \"Forbidden\",\r\n  \"message\": \"Insufficient permissions. Required permission: agents:create\",\r\n  \"code\": \"INSUFFICIENT_PERMISSIONS\"\r\n}\r\n```\r\n\r\n**Solution:** Use `admin_user` for operations requiring special permissions:\r\n```bash\r\ncurl -H \"X-User-ID: admin_user\" ...\r\n```\r\n\r\n### Unauthorized\r\n```json\r\n{\r\n  \"error\": \"Unauthorized\", \r\n  \"message\": \"Missing or invalid authorization header\",\r\n  \"code\": \"MISSING_TOKEN\"\r\n}\r\n```\r\n\r\n**Solution:** Include proper authorization header:\r\n```bash\r\ncurl -H \"Authorization: Bearer development_token\" ...\r\n```\r\n\r\n---\r\n\r\n---\r\n\r\n## üèóÔ∏è Overview\r\n\r\nThe Xerus Glass Tool System provides a centralized, extensible framework for integrating external services and capabilities into the AI assistant. It supports parallel execution, automatic error handling, and intelligent tool orchestration.\r\n\r\n### Key Features\r\n- **Unified Interface**: Consistent API across all tools\r\n- **Parallel Execution**: Run multiple tools simultaneously\r\n- **Error Recovery**: Graceful handling of tool failures\r\n- **Dynamic Registration**: Add/remove tools at runtime\r\n- **Performance Monitoring**: Execution time tracking\r\n- **API Key Management**: Secure credential handling\r\n\r\n---\r\n\r\n## üèõÔ∏è Tool Manager Architecture\r\n\r\n### Core Class: `ToolManager`\r\n\r\nThe `ToolManager` is the central orchestrator for all tool operations.\r\n\r\n```javascript\r\nconst { toolManager } = require('./src/services/tool-manager');\r\n\r\n// Get available tools\r\nconst tools = toolManager.getAvailableTools();\r\nconsole.log(tools); // ['web_search', 'firecrawl_scrape', 'get_time', ...]\r\n\r\n// Execute a single tool\r\nconst result = await toolManager.executeTool('web_search', { \r\n    query: 'latest AI developments',\r\n    max_results: 5 \r\n});\r\n\r\n// Execute multiple tools in parallel\r\nconst results = await toolManager.executeTools([\r\n    { name: 'get_time', parameters: {} },\r\n    { name: 'web_search', parameters: { query: 'weather forecast' } }\r\n]);\r\n```\r\n\r\n### Tool Registration System\r\n\r\nTools are automatically registered during initialization:\r\n\r\n```javascript\r\nclass ToolManager {\r\n    initializeTools() {\r\n        // Web search tools\r\n        this.registerTool(new WebSearchTool(this.apiKeys));\r\n        this.registerTool(new FirecrawlTool(this.apiKeys.firecrawl));\r\n        \r\n        // Utility tools\r\n        this.registerTool(new TimeTool());\r\n        this.registerTool(new SystemInfoTool());\r\n        this.registerTool(new CalculatorTool());\r\n        \r\n        // RAG tool\r\n        this.registerTool(new SimpleRAGTool());\r\n    }\r\n}\r\n```\r\n\r\n---\r\n\r\n## üîå Base Tool Interface\r\n\r\nAll tools must extend the `BaseTool` class and implement the `execute` method.\r\n\r\n### BaseTool Class\r\n\r\n```javascript\r\nclass BaseTool {\r\n    constructor(name, description, parameters) {\r\n        this.name = name;                    // Unique tool identifier\r\n        this.description = description;      // Human-readable description\r\n        this.parameters = parameters;        // JSON schema for parameters\r\n    }\r\n\r\n    async execute(parameters) {\r\n        throw new Error('execute() method must be implemented');\r\n    }\r\n}\r\n```\r\n\r\n### Parameter Schema\r\n\r\nTools define their input parameters using JSON Schema:\r\n\r\n```javascript\r\n{\r\n    type: 'object',\r\n    properties: {\r\n        query: {\r\n            type: 'string',\r\n            description: 'The search query',\r\n        },\r\n        max_results: {\r\n            type: 'number',\r\n            description: 'Maximum number of results',\r\n            default: 5\r\n        }\r\n    },\r\n    required: ['query']\r\n}\r\n```\r\n\r\n### Tool Definition Format\r\n\r\nFor AI function calling, tools are formatted as:\r\n\r\n```javascript\r\n{\r\n    type: 'function',\r\n    function: {\r\n        name: 'web_search',\r\n        description: 'Search the web for current information',\r\n        parameters: { /* JSON schema */ }\r\n    }\r\n}\r\n```\r\n\r\n---\r\n\r\n## üõ†Ô∏è Built-in Tools\r\n\r\n### 1. Web Search Tool (`web_search`)\r\n\r\nSearches the web using Tavily API for current information.\r\n\r\n#### Parameters\r\n```javascript\r\n{\r\n    query: string,              // Required: Search query\r\n    max_results: number,        // Optional: Max results (default: 5)\r\n    include_raw_content: boolean // Optional: Include raw content (default: false)\r\n}\r\n```\r\n\r\n#### Response\r\n```javascript\r\n{\r\n    success: true,\r\n    result: {\r\n        query: \"latest AI developments\",\r\n        results: [\r\n            {\r\n                title: \"AI Breakthrough in 2024\",\r\n                url: \"https://example.com/ai-news\",\r\n                content: \"Recent developments in AI...\",\r\n                score: 0.95\r\n            }\r\n        ],\r\n        answer: \"Based on recent developments...\",\r\n        total_results: 5\r\n    },\r\n    executionTime: 1250,\r\n    timestamp: \"2024-01-15T10:30:00.000Z\"\r\n}\r\n```\r\n\r\n#### Usage Example\r\n```javascript\r\nconst result = await toolManager.executeTool('web_search', {\r\n    query: 'latest AI developments',\r\n    max_results: 3,\r\n    include_raw_content: false\r\n});\r\n\r\nif (result.success) {\r\n    console.log(`Found ${result.result.total_results} results`);\r\n    result.result.results.forEach(item => {\r\n        console.log(`${item.title}: ${item.content}`);\r\n    });\r\n}\r\n```\r\n\r\n### 2. Firecrawl Tool (`firecrawl_scrape`)\r\n\r\nScrapes and extracts content from web pages using Firecrawl API.\r\n\r\n#### Parameters\r\n```javascript\r\n{\r\n    url: string,                    // Required: URL to scrape\r\n    formats: string[],              // Optional: ['markdown', 'html', 'links', 'screenshot']\r\n    include_tags: string[],         // Optional: HTML tags to include\r\n    exclude_tags: string[]          // Optional: HTML tags to exclude\r\n}\r\n```\r\n\r\n#### Response\r\n```javascript\r\n{\r\n    success: true,\r\n    result: {\r\n        url: \"https://example.com\",\r\n        title: \"Page Title\",\r\n        description: \"Page description\",\r\n        content: \"# Page Content\\n\\nMarkdown formatted content...\",\r\n        links: [\"https://link1.com\", \"https://link2.com\"],\r\n        screenshot: \"base64_image_data\",\r\n        success: true\r\n    },\r\n    executionTime: 2100,\r\n    timestamp: \"2024-01-15T10:30:00.000Z\"\r\n}\r\n```\r\n\r\n#### Usage Example\r\n```javascript\r\nconst result = await toolManager.executeTool('firecrawl_scrape', {\r\n    url: 'https://example.com/article',\r\n    formats: ['markdown', 'links'],\r\n    exclude_tags: ['script', 'style']\r\n});\r\n\r\nif (result.success) {\r\n    console.log('Page Title:', result.result.title);\r\n    console.log('Content:', result.result.content);\r\n    console.log('Links found:', result.result.links.length);\r\n}\r\n```\r\n\r\n### 3. Time Tool (`get_time`)\r\n\r\nRetrieves current time and date information.\r\n\r\n#### Parameters\r\n```javascript\r\n{\r\n    timezone: string,       // Optional: Timezone (default: 'local')\r\n    format: string         // Optional: 'iso', 'readable', 'timestamp' (default: 'readable')\r\n}\r\n```\r\n\r\n#### Response\r\n```javascript\r\n{\r\n    success: true,\r\n    result: {\r\n        timestamp: 1705320600000,\r\n        iso: \"2024-01-15T10:30:00.000Z\",\r\n        readable: \"1/15/2024, 10:30:00 AM\",\r\n        timezone: \"Local\",\r\n        day_of_week: \"Monday\",\r\n        date: \"1/15/2024\",\r\n        time: \"10:30:00 AM\"\r\n    },\r\n    executionTime: 5,\r\n    timestamp: \"2024-01-15T10:30:00.000Z\"\r\n}\r\n```\r\n\r\n### 4. System Info Tool (`get_system_info`)\r\n\r\nRetrieves system information and computer details.\r\n\r\n#### Parameters\r\n```javascript\r\n{\r\n    details: string[]   // Optional: ['platform', 'memory', 'cpu', 'network', 'all']\r\n}\r\n```\r\n\r\n#### Response\r\n```javascript\r\n{\r\n    success: true,\r\n    result: {\r\n        platform: {\r\n            os: \"darwin\",\r\n            arch: \"x64\",\r\n            version: \"20.6.0\",\r\n            hostname: \"MacBook-Pro\",\r\n            uptime: 86400\r\n        },\r\n        memory: {\r\n            total: 17179869184,\r\n            free: 8589934592,\r\n            used: 8589934592,\r\n            totalGB: 16,\r\n            freeGB: 8,\r\n            usagePercent: 50\r\n        }\r\n    },\r\n    executionTime: 12,\r\n    timestamp: \"2024-01-15T10:30:00.000Z\"\r\n}\r\n```\r\n\r\n### 5. Calculator Tool (`calculate`)\r\n\r\nPerforms mathematical calculations safely.\r\n\r\n#### Parameters\r\n```javascript\r\n{\r\n    expression: string,     // Required: Mathematical expression\r\n    precision: number       // Optional: Decimal places (default: 2)\r\n}\r\n```\r\n\r\n#### Response\r\n```javascript\r\n{\r\n    success: true,\r\n    result: {\r\n        expression: \"2 + 3 * 4\",\r\n        result: 14,\r\n        formatted: \"14.00\"\r\n    },\r\n    executionTime: 3,\r\n    timestamp: \"2024-01-15T10:30:00.000Z\"\r\n}\r\n```\r\n\r\n### 6. Simple RAG Tool (`search_documents`)\r\n\r\nSearches through local documents and knowledge base.\r\n\r\n#### Parameters\r\n```javascript\r\n{\r\n    query: string,      // Required: Search query\r\n    limit: number       // Optional: Max results (default: 5)\r\n}\r\n```\r\n\r\n#### Response\r\n```javascript\r\n{\r\n    success: true,\r\n    result: {\r\n        query: \"API documentation\",\r\n        results: [\r\n            {\r\n                title: \"API Guide\",\r\n                content: \"This document explains how to use the API...\",\r\n                score: 1.0\r\n            }\r\n        ],\r\n        total_found: 1\r\n    },\r\n    executionTime: 50,\r\n    timestamp: \"2024-01-15T10:30:00.000Z\"\r\n}\r\n```\r\n\r\n---\r\n\r\n## üî® Custom Tool Development\r\n\r\n### Creating a New Tool\r\n\r\n1. **Extend BaseTool**:\r\n```javascript\r\nclass CustomTool extends BaseTool {\r\n    constructor(apiKey) {\r\n        super(\r\n            'custom_tool',\r\n            'Description of what this tool does',\r\n            {\r\n                type: 'object',\r\n                properties: {\r\n                    input: {\r\n                        type: 'string',\r\n                        description: 'Input parameter description'\r\n                    }\r\n                },\r\n                required: ['input']\r\n            }\r\n        );\r\n        this.apiKey = apiKey;\r\n    }\r\n\r\n    async execute(parameters) {\r\n        const { input } = parameters;\r\n        \r\n        try {\r\n            // Tool implementation\r\n            const result = await this.performOperation(input);\r\n            \r\n            return {\r\n                processed_input: input,\r\n                result: result,\r\n                metadata: {\r\n                    tool_version: '1.0.0',\r\n                    execution_context: 'custom'\r\n                }\r\n            };\r\n        } catch (error) {\r\n            throw new Error(`Custom tool failed: ${error.message}`);\r\n        }\r\n    }\r\n\r\n    async performOperation(input) {\r\n        // Custom logic here\r\n        return `Processed: ${input}`;\r\n    }\r\n}\r\n```\r\n\r\n2. **Register the Tool**:\r\n```javascript\r\n// Add to ToolManager.initializeTools()\r\nthis.registerTool(new CustomTool(this.apiKeys.custom));\r\n```\r\n\r\n### Tool Best Practices\r\n\r\n#### Error Handling\r\n```javascript\r\nasync execute(parameters) {\r\n    try {\r\n        // Validate parameters\r\n        if (!parameters.required_param) {\r\n            throw new Error('required_param is missing');\r\n        }\r\n\r\n        // Perform operation\r\n        const result = await this.performOperation(parameters);\r\n        \r\n        return result;\r\n    } catch (error) {\r\n        // Log error details\r\n        console.error(`[${this.name}] Error:`, error);\r\n        \r\n        // Throw with context\r\n        throw new Error(`${this.name} failed: ${error.message}`);\r\n    }\r\n}\r\n```\r\n\r\n#### API Key Management\r\n```javascript\r\nclass APITool extends BaseTool {\r\n    constructor(apiKey) {\r\n        super(/* ... */);\r\n        this.apiKey = apiKey;\r\n    }\r\n\r\n    async execute(parameters) {\r\n        if (!this.apiKey) {\r\n            throw new Error('API key not configured');\r\n        }\r\n        // ... rest of implementation\r\n    }\r\n\r\n    updateApiKey(apiKeys) {\r\n        this.apiKey = apiKeys.service_name;\r\n    }\r\n}\r\n```\r\n\r\n#### Performance Optimization\r\n```javascript\r\nclass CachedTool extends BaseTool {\r\n    constructor() {\r\n        super(/* ... */);\r\n        this.cache = new Map();\r\n        this.cacheTimeout = 5 * 60 * 1000; // 5 minutes\r\n    }\r\n\r\n    async execute(parameters) {\r\n        const cacheKey = this.generateCacheKey(parameters);\r\n        const cached = this.cache.get(cacheKey);\r\n        \r\n        if (cached && Date.now() - cached.timestamp < this.cacheTimeout) {\r\n            return cached.result;\r\n        }\r\n\r\n        const result = await this.performOperation(parameters);\r\n        \r\n        this.cache.set(cacheKey, {\r\n            result,\r\n            timestamp: Date.now()\r\n        });\r\n\r\n        return result;\r\n    }\r\n}\r\n```\r\n\r\n---\r\n\r\n## üí° Integration Examples\r\n\r\n### AI Function Calling Integration\r\n\r\n```javascript\r\n// Get tool definitions for AI\r\nconst toolDefinitions = toolManager.getToolDefinitions();\r\n\r\n// Send to AI provider (OpenAI example)\r\nconst response = await openai.chat.completions.create({\r\n    model: 'gpt-4',\r\n    messages: [\r\n        { role: 'user', content: 'What\\'s the weather in Tokyo?' }\r\n    ],\r\n    tools: toolDefinitions,\r\n    tool_choice: 'auto'\r\n});\r\n\r\n// Handle tool calls\r\nif (response.choices[0].message.tool_calls) {\r\n    const toolCalls = response.choices[0].message.tool_calls.map(call => ({\r\n        name: call.function.name,\r\n        parameters: JSON.parse(call.function.arguments)\r\n    }));\r\n\r\n    const toolResults = await toolManager.executeTools(toolCalls);\r\n    \r\n    // Send results back to AI for final response\r\n    // ...\r\n}\r\n```\r\n\r\n### Batch Tool Execution\r\n\r\n```javascript\r\n// Execute multiple tools in parallel\r\nconst batchOperations = [\r\n    { name: 'get_time', parameters: {} },\r\n    { name: 'get_system_info', parameters: { details: ['memory', 'cpu'] } },\r\n    { name: 'web_search', parameters: { query: 'current events', max_results: 3 } }\r\n];\r\n\r\nconst results = await toolManager.executeTools(batchOperations);\r\n\r\nresults.forEach((result, index) => {\r\n    console.log(`Tool ${batchOperations[index].name}:`);\r\n    console.log(`  Success: ${result.success}`);\r\n    console.log(`  Time: ${result.executionTime}ms`);\r\n    if (result.success) {\r\n        console.log(`  Result:`, result.result);\r\n    } else {\r\n        console.log(`  Error:`, result.error);\r\n    }\r\n});\r\n```\r\n\r\n### Tool Chain Workflows\r\n\r\n```javascript\r\nclass WorkflowManager {\r\n    constructor(toolManager) {\r\n        this.toolManager = toolManager;\r\n    }\r\n\r\n    async executeResearchWorkflow(topic) {\r\n        // Step 1: Search for information\r\n        const searchResult = await this.toolManager.executeTool('web_search', {\r\n            query: topic,\r\n            max_results: 5\r\n        });\r\n\r\n        if (!searchResult.success) {\r\n            throw new Error('Web search failed');\r\n        }\r\n\r\n        // Step 2: Scrape detailed content from top results\r\n        const scrapePromises = searchResult.result.results\r\n            .slice(0, 3)\r\n            .map(result => \r\n                this.toolManager.executeTool('firecrawl_scrape', {\r\n                    url: result.url,\r\n                    formats: ['markdown']\r\n                })\r\n            );\r\n\r\n        const scrapeResults = await Promise.all(scrapePromises);\r\n\r\n        // Step 3: Combine results\r\n        const combinedContent = {\r\n            topic,\r\n            search_summary: searchResult.result.answer,\r\n            detailed_sources: scrapeResults\r\n                .filter(r => r.success)\r\n                .map(r => r.result),\r\n            timestamp: new Date().toISOString()\r\n        };\r\n\r\n        return combinedContent;\r\n    }\r\n}\r\n```\r\n\r\n---\r\n\r\n## ‚ö†Ô∏è Error Handling\r\n\r\n### Error Response Format\r\n\r\nWhen a tool fails, the response follows this format:\r\n\r\n```javascript\r\n{\r\n    success: false,\r\n    error: \"Error message describing what went wrong\",\r\n    timestamp: \"2024-01-15T10:30:00.000Z\"\r\n}\r\n```\r\n\r\n### Common Error Types\r\n\r\n#### API Key Errors\r\n```javascript\r\n{\r\n    success: false,\r\n    error: \"Tavily API key not configured\",\r\n    timestamp: \"2024-01-15T10:30:00.000Z\"\r\n}\r\n```\r\n\r\n#### Network Errors\r\n```javascript\r\n{\r\n    success: false,\r\n    error: \"Web search failed: Network timeout\",\r\n    timestamp: \"2024-01-15T10:30:00.000Z\"\r\n}\r\n```\r\n\r\n#### Parameter Validation Errors\r\n```javascript\r\n{\r\n    success: false,\r\n    error: \"Tool 'web_search' not found\",\r\n    timestamp: \"2024-01-15T10:30:00.000Z\"\r\n}\r\n```\r\n\r\n### Error Handling Best Practices\r\n\r\n```javascript\r\nasync function safeToolExecution(toolName, parameters) {\r\n    try {\r\n        const result = await toolManager.executeTool(toolName, parameters);\r\n        \r\n        if (!result.success) {\r\n            console.error(`Tool ${toolName} failed:`, result.error);\r\n            return null;\r\n        }\r\n        \r\n        return result.result;\r\n    } catch (error) {\r\n        console.error(`Tool execution error:`, error);\r\n        return null;\r\n    }\r\n}\r\n\r\n// Usage with fallback\r\nconst webResults = await safeToolExecution('web_search', { query: 'AI news' });\r\nif (!webResults) {\r\n    console.log('Web search unavailable, using cached results');\r\n    // Fallback logic\r\n}\r\n```\r\n\r\n---\r\n\r\n## ‚ö° Performance Considerations\r\n\r\n### Execution Time Monitoring\r\n\r\nAll tool executions are automatically timed:\r\n\r\n```javascript\r\nconst result = await toolManager.executeTool('web_search', { query: 'test' });\r\nconsole.log(`Execution time: ${result.executionTime}ms`);\r\n```\r\n\r\n### Parallel Execution Benefits\r\n\r\n```javascript\r\n// Sequential execution (slow)\r\nconst time1 = await toolManager.executeTool('get_time', {});\r\nconst search1 = await toolManager.executeTool('web_search', { query: 'news' });\r\n// Total time: ~1500ms\r\n\r\n// Parallel execution (fast)\r\nconst results = await toolManager.executeTools([\r\n    { name: 'get_time', parameters: {} },\r\n    { name: 'web_search', parameters: { query: 'news' } }\r\n]);\r\n// Total time: ~1200ms (limited by slowest tool)\r\n```\r\n\r\n### Performance Tips\r\n\r\n1. **Use Parallel Execution**: Execute independent tools simultaneously\r\n2. **Implement Caching**: Cache results for repeated queries\r\n3. **Optimize Parameters**: Use appropriate limits and filters\r\n4. **Monitor Execution**: Track tool performance over time\r\n5. **Graceful Degradation**: Handle tool failures gracefully\r\n\r\n### Memory Management\r\n\r\n```javascript\r\nclass ToolManager {\r\n    constructor() {\r\n        this.tools = new Map();\r\n        this.executionHistory = new Map();\r\n        this.maxHistorySize = 1000;\r\n    }\r\n\r\n    async executeTool(toolName, parameters) {\r\n        const result = await tool.execute(parameters);\r\n        \r\n        // Store execution history with size limit\r\n        this.addToHistory(toolName, result.executionTime);\r\n        \r\n        return result;\r\n    }\r\n\r\n    addToHistory(toolName, executionTime) {\r\n        if (this.executionHistory.size >= this.maxHistorySize) {\r\n            const firstKey = this.executionHistory.keys().next().value;\r\n            this.executionHistory.delete(firstKey);\r\n        }\r\n        \r\n        this.executionHistory.set(Date.now(), {\r\n            tool: toolName,\r\n            time: executionTime\r\n        });\r\n    }\r\n}\r\n```\r\n\r\n---\r\n\r\n## üîÑ API Updates & Versioning\r\n\r\n### Tool Version Management\r\n\r\nEach tool should include version information:\r\n\r\n```javascript\r\nclass VersionedTool extends BaseTool {\r\n    constructor() {\r\n        super(/* ... */);\r\n        this.version = '1.2.0';\r\n        this.apiVersion = '2023-12-01';\r\n    }\r\n\r\n    async execute(parameters) {\r\n        const result = await this.performOperation(parameters);\r\n        \r\n        return {\r\n            ...result,\r\n            metadata: {\r\n                tool_version: this.version,\r\n                api_version: this.apiVersion,\r\n                compatibility: 'stable'\r\n            }\r\n        };\r\n    }\r\n}\r\n```\r\n\r\n### Backward Compatibility\r\n\r\nWhen updating tools, maintain backward compatibility:\r\n\r\n```javascript\r\nasync execute(parameters) {\r\n    // Support both old and new parameter formats\r\n    const query = parameters.query || parameters.search_term;\r\n    const maxResults = parameters.max_results || parameters.limit || 5;\r\n    \r\n    // ... rest of implementation\r\n}\r\n```\r\n\r\n---\r\n\r\n*For implementation examples and advanced usage patterns, see the [User Guide](./USER_GUIDE.md) and explore the source code in `/src/services/tool-manager.js`.*",
  "metadata": {
    "filename": "API_DOCUMENTATION.md",
    "extension": ".md",
    "size": 33984,
    "created": "2025-07-26T19:23:41.339Z",
    "modified": "2025-07-26T19:23:41.339Z",
    "ingestionDate": "2025-08-02T21:49:39.893Z",
    "title": "Xerus Glass API Documentation",
    "type": "api_reference",
    "category": "documentation",
    "wordCount": 3176,
    "sentenceCount": 259,
    "paragraphCount": 1,
    "characterCount": 27088,
    "estimatedReadingTime": 16,
    "language": "unknown",
    "contentType": "documentation",
    "keyPhrases": [
      "true",
      "tool",
      "javascript",
      "const",
      "isenabled",
      "success",
      "parameters",
      "bash",
      "result",
      "error"
    ]
  },
  "chunks": [
    "doc_82c6c4627e9a0b40_chunk_0",
    "doc_82c6c4627e9a0b40_chunk_1",
    "doc_82c6c4627e9a0b40_chunk_2",
    "doc_82c6c4627e9a0b40_chunk_3",
    "doc_82c6c4627e9a0b40_chunk_4",
    "doc_82c6c4627e9a0b40_chunk_5",
    "doc_82c6c4627e9a0b40_chunk_6",
    "doc_82c6c4627e9a0b40_chunk_7",
    "doc_82c6c4627e9a0b40_chunk_8",
    "doc_82c6c4627e9a0b40_chunk_9",
    "doc_82c6c4627e9a0b40_chunk_10",
    "doc_82c6c4627e9a0b40_chunk_11",
    "doc_82c6c4627e9a0b40_chunk_12",
    "doc_82c6c4627e9a0b40_chunk_13",
    "doc_82c6c4627e9a0b40_chunk_14",
    "doc_82c6c4627e9a0b40_chunk_15",
    "doc_82c6c4627e9a0b40_chunk_16",
    "doc_82c6c4627e9a0b40_chunk_17",
    "doc_82c6c4627e9a0b40_chunk_18",
    "doc_82c6c4627e9a0b40_chunk_19",
    "doc_82c6c4627e9a0b40_chunk_20",
    "doc_82c6c4627e9a0b40_chunk_21",
    "doc_82c6c4627e9a0b40_chunk_22"
  ],
  "stats": {
    "size": 33922,
    "cleanedSize": 27088,
    "chunkCount": 23,
    "processingTime": 7
  },
  "ingestionDate": "2025-08-02T21:49:39.900Z",
  "version": 1
}